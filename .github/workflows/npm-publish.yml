name: Publish Package to NPM

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Check versions match
        id: version-check
        run: |
          ROOT_VERSION=$(node -p "require('./package.json').version")
          CLI_VERSION=$(node -p "require('./create-expo-next-monorepo/package.json').version")

          echo "Root package.json version: $ROOT_VERSION"
          echo "CLI package.json version: $CLI_VERSION"

          if [ "$ROOT_VERSION" != "$CLI_VERSION" ]; then
            echo "Version mismatch! Root version ($ROOT_VERSION) does not match CLI version ($CLI_VERSION)"
            exit 1
          else
            echo "Versions match: $ROOT_VERSION"
            echo "version=$ROOT_VERSION" >> $GITHUB_OUTPUT
          fi

  publish-npm:
    needs: version-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"

      - name: Get version from previous job
        id: get-version
        run: |
          echo "Using version: ${{ needs.version-check.outputs.version }}"
          echo "version=${{ needs.version-check.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: cd create-expo-next-monorepo && yarn install --frozen-lockfile

      - name: Publish to NPM
        run: cd create-expo-next-monorepo && yarn publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # GitHub 릴리스 생성 방법 변경
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.version-check.outputs.version }}
          name: Release v${{ needs.version-check.outputs.version }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
